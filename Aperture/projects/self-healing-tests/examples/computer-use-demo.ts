/**
 * GEMINI COMPUTER USE - True Visual Understanding Demo
 *
 * This demo uses the Computer Use model as it was designed:
 * - Visually understands the page (no CSS selectors!)
 * - Generates click coordinates based on what it "sees"
 * - Completes tasks through visual understanding
 *
 * Browser stays open the entire time showing the AI working!
 */

import { chromium } from '@playwright/test';
import { config as dotenvConfig } from 'dotenv';
import { ComputerUseAgent } from '../src/core/computer-use-agent.js';

dotenvConfig();

async function main() {
  console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë  GEMINI 2.5 COMPUTER USE - VISUAL UNDERSTANDING DEMO  ‚ïë');
  console.log('‚ïë  AI "sees" the page and clicks without CSS selectors  ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

  if (!process.env.GEMINI_API_KEY) {
    console.error('‚ùå ERROR: GEMINI_API_KEY not found!');
    return;
  }

  console.log('ü§ñ Initializing Gemini 2.5 Computer Use Model...\n');

  const agent = new ComputerUseAgent({
    framework: 'playwright',
    testTimeout: 30000,
    retryCount: 1,
    enableHealing: true,
    autoApply: false,
    confidenceThreshold: 0.7,
    maxHealingAttempts: 3,
    model: 'gemini-2.5-computer-use-preview-10-2025',
    screenshotOnFailure: true,
    outputDir: './test-results',
    verbose: true,
    geminiApiKey: process.env.GEMINI_API_KEY,
  });

  const browser = await chromium.launch({
    headless: false,
    slowMo: 800,
  });

  const context = await browser.newContext({
    viewport: { width: 1440, height: 900 },
  });

  const page = await context.newPage();

  try {
    console.log('üåê Navigating to BBC Sport Football...');
    await page.goto('https://www.bbc.com/sport/football', {
      waitUntil: 'domcontentloaded',
      timeout: 15000
    });

    await page.waitForTimeout(2000);

    // Handle cookies
    try {
      const cookieButton = page.locator('button:has-text("Accept"), button:has-text("agree")').first();
      if (await cookieButton.isVisible({ timeout: 3000 })) {
        console.log('üç™ Accepting cookies...');
        await cookieButton.click();
        await page.waitForTimeout(2000);
      }
    } catch (e) {
      console.log('‚ÑπÔ∏è  No cookie banner');
    }

    console.log('\n' + '='.repeat(70));
    console.log('COMPUTER USE: VISUAL ANALYSIS');
    console.log('='.repeat(70));

    console.log('\nüì∏ Capturing screenshot...');
    const screenshot = await page.screenshot({ fullPage: true });
    console.log(`‚úÖ Screenshot captured (${(screenshot.length / 1024).toFixed(0)} KB)\n`);

    const viewport = page.viewportSize() || { width: 1440, height: 900 };
    const task = 'Find and click on 5 recent football article headlines to open them';

    console.log('üß† Sending to Gemini Computer Use model...');
    console.log(`   Task: "${task}"`);
    console.log(`   The AI will VISUALLY identify clickable articles\n`);

    console.log('‚è≥ Analyzing... (10-15 seconds)\n');

    const aiResponse = await agent.analyzeAndAct(
      screenshot,
      task,
      page.url(),
      viewport
    );

    console.log('‚úÖ Computer Use Analysis Complete!\n');

    console.log('='.repeat(70));
    console.log('ü§ñ COMPUTER USE RESULTS');
    console.log('='.repeat(70));
    console.log(`Overall Confidence: ${(aiResponse.confidence * 100).toFixed(0)}%`);
    console.log(`Reasoning: ${aiResponse.reasoning}\n`);

    if (aiResponse.actions.length === 0) {
      console.log('‚ùå No actions generated by Computer Use model');
      console.log('   This could mean:');
      console.log('   - The model needs better prompting');
      console.log('   - The page structure is unclear');
      console.log('   - API response format changed\n');
      console.log('‚è±Ô∏è  Keeping browser open for 15 seconds...');
      await page.waitForTimeout(15000);
      return;
    }

    console.log(`üí° AI IDENTIFIED ${aiResponse.actions.length} ACTIONS:\n`);
    aiResponse.actions.forEach((action, i) => {
      console.log(`${i + 1}. ${action.type.toUpperCase()}`);
      console.log(`   Description: ${action.description}`);
      console.log(`   Confidence: ${(action.confidence * 100).toFixed(0)}%`);
      if (action.coordinates) {
        const actualCoords = agent.convertCoordinates(action.coordinates, viewport);
        console.log(`   Coordinates: (${action.coordinates.x}, ${action.coordinates.y}) normalized`);
        console.log(`                ‚Üí (${actualCoords.x.toFixed(0)}, ${actualCoords.y.toFixed(0)}) pixels`);
      }
      console.log(`   Reasoning: ${action.reasoning}\n`);
    });

    console.log('‚è±Ô∏è  Waiting 3 seconds before executing actions...\n');
    await page.waitForTimeout(3000);

    console.log('='.repeat(70));
    console.log('EXECUTING AI-GENERATED ACTIONS');
    console.log('='.repeat(70));

    let successCount = 0;

    // Execute each action the AI told us to do
    for (let i = 0; i < Math.min(5, aiResponse.actions.length); i++) {
      const action = aiResponse.actions[i];

      console.log(`\nüéØ Action ${i + 1}/${Math.min(5, aiResponse.actions.length)}: ${action.description}`);

      try {
        if (action.type === 'click' && action.coordinates) {
          const coords = agent.convertCoordinates(action.coordinates, viewport);

          console.log(`   Clicking at pixel position (${coords.x.toFixed(0)}, ${coords.y.toFixed(0)})...`);

          // Click at the exact coordinates the AI told us
          await page.mouse.click(coords.x, coords.y);

          console.log('   ‚úÖ Click executed');

          await page.waitForTimeout(1500);

          // Check if a new tab opened (article loaded)
          const pages = context.pages();
          if (pages.length > successCount + 1) {
            console.log(`   ‚úÖ New tab opened! (Tab ${pages.length})`);
            successCount++;
          } else {
            console.log('   ‚ö†Ô∏è  No new tab - click may not have hit an article link');
          }

        } else {
          console.log(`   ‚ö†Ô∏è  Skipping action type: ${action.type}`);
        }

      } catch (error) {
        console.log(`   ‚ùå Error executing action: ${error instanceof Error ? error.message : 'Unknown'}`);
      }

      await page.waitForTimeout(1000);
    }

    console.log('\n' + '='.repeat(70));
    console.log('‚úÖ COMPUTER USE DEMO COMPLETE');
    console.log('='.repeat(70));

    console.log(`\nüìä RESULTS:`);
    console.log(`   Actions Attempted: ${Math.min(5, aiResponse.actions.length)}`);
    console.log(`   Successful Clicks: ${successCount}`);
    console.log(`   Browser Tabs Open: ${context.pages().length}`);

    if (successCount >= 3) {
      console.log('\nüéâ SUCCESS! The AI visually identified and clicked articles!');
      console.log('   This is Gemini Computer Use in action!');
      console.log('   No CSS selectors - pure visual understanding! üöÄ\n');
    } else {
      console.log('\n‚ö†Ô∏è  Partial success - some clicks may have missed.');
      console.log('   Computer Use model needs refinement for this task.\n');
    }

    console.log('üé¨ Check your browser tabs!');
    console.log('‚è±Ô∏è  Keeping browser open for 30 seconds...\n');
    await page.waitForTimeout(30000);

  } catch (error) {
    console.error('\n‚ùå Error:', error);
    console.log('\n‚è±Ô∏è  Keeping browser open for 10 seconds...');
    await page.waitForTimeout(10000);
  } finally {
    console.log('üëã Closing browser...');
    await browser.close();
  }
}

main().catch(console.error);
