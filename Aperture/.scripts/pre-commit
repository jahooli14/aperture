#!/bin/bash
# Pre-commit hook to ensure documentation is updated when code changes
# Install: .scripts/install-hooks.sh

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Function to detect which projects changed
detect_changed_projects() {
  local projects=""

  # Check each project directory
  if echo "$STAGED_FILES" | grep -q "^projects/wizard-of-oz/"; then
    projects="$projects projects/wizard-of-oz"
  fi

  if echo "$STAGED_FILES" | grep -q "^projects/memory-os/"; then
    projects="$projects projects/memory-os"
  fi

  if echo "$STAGED_FILES" | grep -q "^projects/visual-test-generator/"; then
    projects="$projects projects/visual-test-generator"
  fi

  if echo "$STAGED_FILES" | grep -q "^projects/self-healing-tests/"; then
    projects="$projects projects/self-healing-tests"
  fi

  if echo "$STAGED_FILES" | grep -q "^scripts/autonomous-docs/"; then
    projects="$projects scripts/autonomous-docs"
  fi

  echo "$projects"
}

# Function to check if code changed in a project
project_code_changed() {
  local project=$1
  echo "$STAGED_FILES" | grep -qE "^${project}/(src/|api/|lib/|components/|pages/|hooks/|stores/|utils/|.*\.(ts|tsx|js|jsx)$)"
}

# Function to check if project docs were updated
project_docs_updated() {
  local project=$1

  # Check for project-specific NEXT_SESSION.md or README.md
  if echo "$STAGED_FILES" | grep -qE "^${project}/(NEXT_SESSION\.md|README\.md)"; then
    return 0
  fi

  # Also accept root NEXT_SESSION.md for any project
  if echo "$STAGED_FILES" | grep -q "^NEXT_SESSION\.md$"; then
    return 0
  fi

  return 1
}

# Get changed projects
CHANGED_PROJECTS=$(detect_changed_projects)

# Check if any root-level code changed (not in a project)
ROOT_CODE_CHANGED=false
if echo "$STAGED_FILES" | grep -qE "^(src/|api/|lib/|.*\.(ts|tsx|js|jsx)$)" | grep -vE "^projects/|^scripts/"; then
  ROOT_CODE_CHANGED=true
fi

# Track if we need to warn about docs
MISSING_DOCS=()
CHANGED_FILES_BY_PROJECT=()

# Check each changed project
for project in $CHANGED_PROJECTS; do
  if project_code_changed "$project"; then
    if ! project_docs_updated "$project"; then
      MISSING_DOCS+=("$project")

      # Collect changed files for this project
      files=$(echo "$STAGED_FILES" | grep "^${project}/" | grep -E "\.(ts|tsx|js|jsx)$" | head -3)
      CHANGED_FILES_BY_PROJECT+=("$project:$files")
    fi
  fi
done

# Check root-level changes
if [ "$ROOT_CODE_CHANGED" = true ]; then
  if ! echo "$STAGED_FILES" | grep -q "^NEXT_SESSION\.md$"; then
    MISSING_DOCS+=("root")
  fi
fi

# If any project is missing doc updates, prompt user
if [ ${#MISSING_DOCS[@]} -gt 0 ]; then
  echo ""
  echo -e "${YELLOW}‚ö†Ô∏è  Code changes detected without documentation updates${NC}"
  echo ""

  # Show what changed per project
  for entry in "${CHANGED_FILES_BY_PROJECT[@]}"; do
    project="${entry%%:*}"
    files="${entry#*:}"

    echo -e "${BLUE}üìÅ $project${NC}"
    echo "$files" | while read -r file; do
      [ -n "$file" ] && echo "  - $file"
    done
    echo ""
  done

  # Show which docs need updating
  echo -e "${YELLOW}üìù Documentation to update:${NC}"
  for project in "${MISSING_DOCS[@]}"; do
    if [ "$project" = "root" ]; then
      echo "  - NEXT_SESSION.md (root - required)"
    else
      # Check if project has NEXT_SESSION.md
      if [ -f "${project}/NEXT_SESSION.md" ]; then
        echo "  - ${project}/NEXT_SESSION.md (required)"
      else
        echo "  - NEXT_SESSION.md (root - required for $project changes)"
      fi
    fi
  done

  echo ""
  echo "üí° TIP: Use '/update-docs' command in Claude Code to help"
  echo ""
  echo -e "${YELLOW}Did you update documentation? (y/n/skip)${NC}"
  read -r response

  case "$response" in
    [yY]|[yY][eE][sS])
      echo -e "${GREEN}‚úì Proceeding with commit${NC}"
      echo ""
      echo "‚ö†Ô∏è  Make sure you staged the doc updates:"
      for project in "${MISSING_DOCS[@]}"; do
        if [ "$project" = "root" ]; then
          echo "  git add NEXT_SESSION.md"
        elif [ -f "${project}/NEXT_SESSION.md" ]; then
          echo "  git add ${project}/NEXT_SESSION.md"
        else
          echo "  git add NEXT_SESSION.md"
        fi
      done
      ;;
    [sS]|[sS][kK][iI][pP])
      echo -e "${YELLOW}‚ö† Skipping doc check - remember to update later!${NC}"
      ;;
    *)
      echo -e "${RED}‚úó Commit cancelled - update docs first${NC}"
      echo ""
      echo "Quick fix:"
      for project in "${MISSING_DOCS[@]}"; do
        if [ "$project" = "root" ]; then
          echo "  1. Update NEXT_SESSION.md with what you changed"
          echo "  2. git add NEXT_SESSION.md"
        elif [ -f "${project}/NEXT_SESSION.md" ]; then
          echo "  1. Update ${project}/NEXT_SESSION.md with what you changed"
          echo "  2. git add ${project}/NEXT_SESSION.md"
        else
          echo "  1. Update NEXT_SESSION.md (root) with $project changes"
          echo "  2. git add NEXT_SESSION.md"
        fi
      done
      echo "  3. Try commit again"
      exit 1
      ;;
  esac
fi

# Check for dependency changes
DEPS_CHANGED_PROJECTS=()
for project in $CHANGED_PROJECTS; do
  if echo "$STAGED_FILES" | grep -q "^${project}/package\.json$"; then
    if ! project_docs_updated "$project"; then
      DEPS_CHANGED_PROJECTS+=("$project")
    fi
  fi
done

if [ ${#DEPS_CHANGED_PROJECTS[@]} -gt 0 ]; then
  echo ""
  echo -e "${YELLOW}‚ö†Ô∏è  package.json changed in:${NC}"
  for project in "${DEPS_CHANGED_PROJECTS[@]}"; do
    echo "  - $project"
  done
  echo ""
  echo "Consider noting dependency updates in documentation"
  echo ""
fi

# All checks passed
echo -e "${GREEN}‚úì Pre-commit checks passed${NC}"
exit 0
